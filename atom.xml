<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑吧！代码</title>
  
  <subtitle>Running Code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lamprose.github.io/"/>
  <updated>2019-06-11T06:40:02.838Z</updated>
  <id>https://lamprose.github.io/</id>
  
  <author>
    <name>lamprose</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简易U盘防火墙(UKiller)</title>
    <link href="https://lamprose.github.io/java/UKiller/"/>
    <id>https://lamprose.github.io/java/UKiller/</id>
    <published>2019-06-03T11:47:41.000Z</published>
    <updated>2019-06-11T06:40:02.838Z</updated>
    
    <content type="html"><![CDATA[<p>最近大三信息安全课程设计课大作业是制作一个U盘防火墙，我用JAVA编写了一个简单的程序，现在分享出来供大家参考。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本程序基于JFrame编写而成，原理十分简单，写这篇文章是为了记录学习</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>​    光盘放入光驱之后就会自动运行，它主要是依靠两个文件来实现，光盘上的<code>AutoRun.inf</code>文件和操作系统自身的系统文件<code>Cdvsd.vxd</code>。<code>Cdvsd.vxd</code>会随时侦测光驱中是否有放入光盘的动作，如果有的话，便开始寻找目录下的<code>AutoRun.inf</code>文件，如果存在<code>AutoRun.inf</code>文件则执行它里面的预设程序。类似的道理，当U盘中存在特定的<code>AutoRun.inf</code>文件时，插上U盘后，也能让U盘自动运行程序。因此，病毒通过构造特定的<code>AutoRun.inf</code>文件，当用户双击U盘盘符时，自动运行U盘里的病毒。</p><p>一个“功能”比较完备的<code>AutoRun.inf</code>文件示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[autorun]</span><br><span class="line">Open = virus.exe      //自动运行</span><br><span class="line">Shellexecute = virus.exe       //双击盘符时自动运行</span><br><span class="line">Shell\open = 打开（&amp;O）</span><br><span class="line">Shell\open\Command = virus.exe  //修改右击运行的程序</span><br><span class="line">Shell\open\Default = 1</span><br><span class="line">Shell\explore = 资源管理器（&amp;X）</span><br><span class="line">Shell\explore\Command = virus.exe //修改右击资源管理器时运行的程序</span><br></pre></td></tr></table></figure><p>​    在这种情况下，假如在U盘根目录下存在这个<code>AutoRun.inf</code>和<code>virus.exe</code>，而<code>virus.exe</code>是一个病毒的话，电脑就很容易感染病毒。因此，需要防止用户双击打开U盘造成病毒感染。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>应用程序要有界面，并提供相关用户帮助信息（例如，病毒种类、个数、位置等）。</li><li>应用程序能够实时监控多种可移动存储设备（U盘，硬盘，MPS，SD卡）的插入，并自动弹出提醒。</li><li>在U盘插入后，能够实时自动对其中是否存在AutoRun.inf文件进行安全检测，并可以使用记事本将AutoRun.inf文件打开，以及删除功能。</li><li>在检测到AutoRun.inf文件存在的基础上，能够对AutoRun.inf文件进行简单的识别，并识别出AutoRun.inf文件中的病毒信息。</li><li>提供安全打开U盘功能，防止用户在拔下U盘前再次双击打开U盘，避免U盘再次中毒。</li><li>对检测到的多种病毒，能够进行查杀</li><li>添加其他一些实用功能，比如，开机自启动，最小化到系统托盘</li></ul><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a><a href="https://github.com/lamprose/UKiller/releases/tag/1.3" target="_blank" rel="noopener">1.3</a></h2><ol><li>增加开机自启动</li><li>增加无需更新弹框</li><li>优化代码结构</li><li>修复一些bug</li><li>提高稳定性</li></ol><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a><a href="https://github.com/lamprose/UKiller/releases/tag/1.2" target="_blank" rel="noopener">1.2</a></h2><ol><li>修复更新日志中文乱码</li><li>完善更新功能</li><li>检测更新文件后自动下载</li><li>修复bugs</li><li>提高流畅度</li></ol><h2 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a><a href="https://github.com/lamprose/UKiller/releases/tag/1%2C0" target="_blank" rel="noopener">1.0</a></h2><ol><li>增加托盘图标</li><li>插入磁盘时自动检测病毒</li><li>扫描结果显示病毒信息</li><li>自动删除病毒文件</li><li>修复bug</li><li>提高稳定性</li></ol><h1 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a>项目链接</h1><ul><li>源代码 <a href="https://github.com/lamprose/UKiller" target="_blank" rel="noopener">https://github.com/lamprose/UKiller</a></li><li>下载链接 <a href="https://github.com/lamprose/UKiller/releases" target="_blank" rel="noopener">https://github.com/lamprose/UKiller/releases</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近大三信息安全课程设计课大作业是制作一个U盘防火墙，我用JAVA编写了一个简单的程序，现在分享出来供大家参考。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://lamprose.github.io/categories/java/"/>
    
    
      <category term="信息安全" scheme="https://lamprose.github.io/tags/info-security/"/>
    
  </entry>
  
  <entry>
    <title>前后端跨域问题</title>
    <link href="https://lamprose.github.io/development/vue_cros/"/>
    <id>https://lamprose.github.io/development/vue_cros/</id>
    <published>2019-04-21T07:36:02.000Z</published>
    <updated>2019-05-09T18:15:56.876Z</updated>
    
    <content type="html"><![CDATA[<p>最近大三数据库课程设计课大作业是用基于SpringBoot的SSM框架+Vue.js设计一个网站，我们小组开发了一个关于汽车销售的网站，其中遇到很多问题，前后端跨越就是其中之一<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此项目实践基于Token的WEB后台认证机制，自己了实践一次，采用前后端分离的设计模式，其中出现了前后端跨域失败的问题，所以就有了下文。关于token的生成，另外一篇文章会细讲。本篇主要讨论在发送ajax请求，头部带上自定义token验证验证，暴露出的跨域问题。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>CORS：跨来源资源共享（CORS）是一份浏览器技术的规范，提供了 Web 服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比JSONP要来的好，JSONP对于 RESTful 的 API 来说，发送 POST/PUT/DELET 请求将成为问题，不利于接口的统一。但另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。不过现代的浏览器（IE10以上）基本都支持 CORS。<br>预检请求（option）:在 CORS 中，可以使用 OPTIONS 方法发起一个预检请求(一般都是浏览检测到请求跨域时，会自动发起)，以检测实际请求是否可以被服务器所接受。预检请求报文中的 Access-Control-Request-Method 首部字段告知服务器实际请求所使用的 HTTP 方法；Access-Control-Request-Headers 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /resources/post-here/ HTTP/1.1 </span><br><span class="line">Host: bar.other </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 </span><br><span class="line">Accept-Language: en-us,en;q=0.5 </span><br><span class="line">Accept-Encoding: gzip,deflate </span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 </span><br><span class="line">Connection: keep-alive </span><br><span class="line">Origin: http://foo.example </span><br><span class="line">Access-Control-Request-Method: POST </span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure><p>服务器所返回的 Access-Control-Allow-Methods 首部字段将所有允许的请求方法告知客户端。该首部字段与 Allow 类似，但只能用于涉及到 CORS 的场景中。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>话不多说，先上代码：</p><p><strong>前端（ajax库：vue-resource）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">userLogin:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.$http(&#123;</span><br><span class="line">method:<span class="string">'post'</span>,</span><br><span class="line">    url:<span class="string">'http://localhost:8089/StockAnalyse/LoginServlet'</span>,</span><br><span class="line">    params&#123;</span><br><span class="line">    <span class="string">"flag"</span>:<span class="string">"ajaxlogin"</span>,</span><br><span class="line">    <span class="string">"loginName"</span>:<span class="keyword">this</span>.userInfo.id,</span><br><span class="line">    <span class="string">"loginPwd"</span>:<span class="keyword">this</span>.userInfo.psd</span><br><span class="line">    &#125;, </span><br><span class="line">    headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;, </span><br><span class="line">    credientials:<span class="literal">false</span>, </span><br><span class="line">    emulateJSON: <span class="literal">true</span>                    </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">"token"</span>,response.data);</span><br><span class="line">    <span class="keyword">this</span>.isActive =<span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#showInfo"</span>).classList.toggle(<span class="string">"isLogin"</span>);</span><br><span class="line">    &#125;)                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后端相关配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost&quot;); //允许来之域名为http://localhost的请求        </span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin,No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With, userId, token&quot;);</span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE&quot;); //请求允许的方法</span><br><span class="line">response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);    //身份认证(预检)后，xxS以内发送请求不在需要预检，既可以直接跳过预检，进行请求(前面只是照猫画虎，后面才理解)</span><br></pre></td></tr></table></figure><p>关于上面一段代码，是我的用户首次登录认证，生成token令牌，保存在sessionStorage中，供后面调用；需要说明的是，前端服务器地址是：localhost:8081,后端服务器地址：localhost:8080，所以前后端涉及到跨域，自己在后端做了相应的跨域设置：response.setHeader(“Access-Control-Allow-Origin”, “<a href="http://localhost&quot;)" target="_blank" rel="noopener">http://localhost&quot;)</a>; 所以登录认证,安全的实现了跨域信息认证，后端相应发送回来了相应的token信息。<br>但获取到token后，想在需要的时候，在请求的头部携带上这个令牌，来做相应的身份认证，所以自己在请求中做了这些改动（有标注），后端没改动，源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">checkIdentity:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> token =sessionStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line"><span class="keyword">this</span>.$http(&#123;</span><br><span class="line">method:<span class="string">'post'</span>,</span><br><span class="line">        url:<span class="string">'http://localhost:8089/StockAnalyse/LoginServlet'</span>,</span><br><span class="line">        params:&#123;</span><br><span class="line">            <span class="string">"flag"</span>:<span class="string">"checklogin"</span>,</span><br><span class="line">            <span class="string">"isLogin"</span>:<span class="literal">true</span>,<span class="string">"token"</span>:token</span><br><span class="line">        &#125;, </span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>，</span><br><span class="line">            <span class="string">'token'</span>:token   <span class="comment">//header中携带令牌信息    </span></span><br><span class="line">        &#125;,   </span><br><span class="line">        credientials:<span class="literal">false</span>, </span><br><span class="line">        emulateJSON: <span class="literal">true</span>                    </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.data);</span><br><span class="line">&#125;)                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上在devtools打印了如下错误信息：Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>‘ is therefore not allowed access.仔细想一想，好像，似乎这个问题遇到过，还提过问，确实提过，<a href="https://segmentfault.com/q/1010000009255088" target="_blank" rel="noopener">链接在这里</a>。但这次的设置和上次一样，就在header里多加了一个自定义token，但却报了和上次没有设置headers: {‘Content-Type’: ‘application/x-www-form-urlencoded’}一样的错误信息，于是，不知所措，算了，重头再来，好好百度，研究一下cors跨域。</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/vue-cros/vue-cros-1.png" alt="vue-cros-1.png"></p><h1 id="理论学习"><a href="#理论学习" class="headerlink" title="理论学习"></a>理论学习</h1><p>运气不错，找到了<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">一篇好文</a>，文章讲的很细，也找到自己问题的所在：触发 CORS 预检请求。引用原文的话加以自己总结：跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request：似曾相识有没有？诶，对，上面那个错误信息中，就有一个这样陌生的词汇），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。所以跨域请求分两种：简单请求和预检请求。一次完整的请求不需要服务端预检，直接响应的，归为简单请求；而响应前需要预检的，称为预检请求，只有预检请求通过，才有接下来的简单请求。对于那些是简单请求，那些会触发预检请求，文章做了详细的总结，这里列出触发预检请求的条件（不知道脑子为啥会想到那些会触发BFC的条件），不要跑题，原文是这样总结的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">当请求满足下述任一条件时，即应首先发送预检请求：</span><br><span class="line">使用了下面任一 HTTP 方法：</span><br><span class="line">PUT</span><br><span class="line">DELETE</span><br><span class="line">CONNECT</span><br><span class="line">OPTIONS</span><br><span class="line">TRACE</span><br><span class="line">PATCH</span><br><span class="line">人为设置了对 CORS 安全的首部字段集合之外的其他首部字段。该集合为：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Content-Type (but note the additional requirements below)</span><br><span class="line">DPR</span><br><span class="line">Downlink</span><br><span class="line">Save-Data</span><br><span class="line">Viewport-Width</span><br><span class="line">Width</span><br><span class="line"> Content-Type 的值不属于下列之一:</span><br><span class="line">application/x-www-form-urlencoded</span><br><span class="line">multipart/form-data</span><br><span class="line">text/plain</span><br></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>所以，对于自己的错误，无法将预检请求转变为简单请求，所以，只有寻找方法怎么在后端实现相应的预检请求，来返回一个状态码2xx，告诉浏览器此次跨域请求可以继续。所以注意力转向后端。<br>关于JAVA实现预检请求，基本都是采用过滤器或者拦截器解决。</p><h3 id="过滤器解决"><a href="#过滤器解决" class="headerlink" title="过滤器解决"></a>过滤器解决</h3><p>自定义（copy）了一个filter,并在web.xml中进行了设置。源码：</p><p><strong>Filter接口实现部分：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stock.model;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;   </span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;    </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpStatus;   <span class="comment">//这里需要添加commons-httpclient-3.1.jar</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;     <span class="comment">//filter 接口的自定义实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);           </span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        System.out.println(<span class="string">"filter origin:"</span>+token);<span class="comment">//通过打印，可以看到一次非简单请求，会被过滤两次，即请求两次，第一次请求确认是否符合跨域要求（预检），这一次是不带headers的自定义信息，第二次请求会携带自定义信息。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equals(request.getMethod()))&#123;<span class="comment">//这里通过判断请求的方法，判断此次是否是预检请求，如果是，立即返回一个204状态吗，标示，允许跨域；预检后，正式请求，这个方法参数就是我们设置的post了</span></span><br><span class="line">          response.setStatus(HttpStatus.SC_NO_CONTENT); <span class="comment">//HttpStatus.SC_NO_CONTENT = 204</span></span><br><span class="line">          response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, DELETE, OPTIONS, DELETE"</span>);<span class="comment">//当判定为预检请求后，设定允许请求的方法</span></span><br><span class="line">          response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, x-requested-with, Token"</span>); <span class="comment">//当判定为预检请求后，设定允许请求的头部类型</span></span><br><span class="line">          response.addHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"1"</span>);                           </span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>stock.model.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器解决"><a href="#拦截器解决" class="headerlink" title="拦截器解决"></a>拦截器解决</h3><p>使用拦截器将所有请求拦截下来，如果是预检请求则返回请求通过的状态码2XX，如果不是则检验header头里token字段是否合法，不合法则拦截并返回token不合法的状态码，合法则将请求放行至cotroller层处理。</p><p><strong>拦截器源码Interceptor.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次预检请求都过</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">"OPTIONS"</span>)) &#123;<span class="comment">//如果是第一次预检请求</span></span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);<span class="comment">//直接返回请求成功的状态</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//拦截返回后端</span></span><br><span class="line">        &#125;</span><br><span class="line">        setCrossDomain(response);</span><br><span class="line">        <span class="keyword">return</span> checkToken(request,response);<span class="comment">//检验token是否合法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置拦截器Configation.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carshop.server.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configation</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerInterceptor <span class="title">getInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Interceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册拦截器2</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">         <span class="comment">/*addPathPatterns 用于添加拦截规则</span></span><br><span class="line"><span class="comment">         excludePathPatterns 用户排除拦截*/</span></span><br><span class="line">        registry.addInterceptor(getInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/user/register"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>当在后端实现添加上面的源码后，皆大欢喜，问题得以解决，补上失败和成功,自己截下的两张请求响应图。</p><p><strong>请求失败</strong></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/vue-cros/vue-cros-2.png" alt="vue-cros-2.png"></p><p><strong>请求成功</strong></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/vue-cros/vue-cros-3.png" alt="vue-cros-3.png"></p><p>仔细看请求响应失败发起响应那张图，在General的数据集中，可以看到方法是options，而非代码指定的post请求，所以这是一次浏览器发出的一次预检请求，让服务器确认此IP是否有访问的权限，如果有，服务器需要返回一个2xx的状态码给浏览器。紧接着再发起一次简单请求。如下面在devtools中的截取图片（为了对比清除，我把两次分别截取，做了拼接，因为不会做动态图）。可以看到同一个post请求，实际上产生了两次网络连接。</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/vue-cros/vue-cros-4.png" alt="vue-cros-4.png"></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/vue-cros/vue-cros-5.png" alt="vue-cros-5.png"></p><p>但关于CORS,要去探索的，还有很多很多，所以遵循革命语录：实践（有时也可以是时间）是检验真理的唯一标准，是没有错的。后续有新的收获，再补充。</p><h2 id="具体源代码详见Github"><a href="#具体源代码详见Github" class="headerlink" title="具体源代码详见Github"></a>具体源代码详见Github</h2><p><a href="https://github.com/lamprose/CarShop" target="_blank" rel="noopener">Github-CarShop</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近大三数据库课程设计课大作业是用基于SpringBoot的SSM框架+Vue.js设计一个网站，我们小组开发了一个关于汽车销售的网站，其中遇到很多问题，前后端跨越就是其中之一&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="vue" scheme="https://lamprose.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端Token生成</title>
    <link href="https://lamprose.github.io/development/vue-token/"/>
    <id>https://lamprose.github.io/development/vue-token/</id>
    <published>2019-03-30T07:36:02.000Z</published>
    <updated>2019-06-03T10:02:17.728Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做数据库课程设计，我是做前端的，后端并不是很懂，看vue这个框架仅仅只是入门，所以这篇文章写的可能不怎么好，仅作记录，有什么不对或不足的地方欢迎大神指出。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>做一个登录界面，我选择的是用token进行验证登录，我用的前端框架是Vue.js 和 element-ui,如何在vue 中使用token进行验证登录</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>1、利用token进行验证登录，用户进行登录操作时，后台会生成一个token返回给前端，由前端 将这个token放到请求头中（这个是百度的，一般都是放在请求头），并且此后调用接口都要把token放到请求的请求头传回给后台。<br>2、用户登录后，前端需要把token保存下来,后面发送请求的时候在拿出来；<br>3、在发送每个请求时都要把token加到请求头里，写一个全局的拦截器</p><h1 id="记录和说明"><a href="#记录和说明" class="headerlink" title="记录和说明"></a>记录和说明</h1><p><strong>使用vuex存储登录状态并用cookie存储token</strong></p><p> 在src文件夹(我的vue项目是用vue-cli 脚手架创建的)下创建一个store文件夹，在store中创建一个index.js</p><p><code>src/store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./modules/app'</span></span><br><span class="line"><span class="keyword">import</span> chat <span class="keyword">from</span> <span class="string">'./modules/chat'</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用sessionStorage使vuex持久化，保存至本次回话结束，防止刷新导致前端反复向后端请求数据</span></span><br><span class="line"><span class="keyword">const</span> handleStore = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.store) store.replaceState(<span class="built_in">JSON</span>.parse(sessionStorage.store))  <span class="comment">// 初始化store</span></span><br><span class="line">  store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">"store"</span>,  <span class="built_in">JSON</span>.stringify(state))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    chat,</span><br><span class="line">    app,</span><br><span class="line">    user,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters,</span><br><span class="line">  plugins: [handleStore]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><code>src/store/module/user.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loginById,loginByToken, logout, getUserInfo,checkSession,changePassword, register&#125; <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">import</span> &#123;setSecret,changePasswordBySecret,checkHaveSecret&#125; <span class="keyword">from</span> <span class="string">"@/api/security"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;baseUrl&#125; <span class="keyword">from</span> <span class="string">"@/api"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;editUser&#125; <span class="keyword">from</span> <span class="string">"@/api/admin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultAvatar=baseUrl+<span class="string">'/UserAvatar/default_avatar.png'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    id: <span class="string">''</span>,</span><br><span class="line">    token: getToken(<span class="string">'token'</span>),</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    sex:<span class="string">''</span>,</span><br><span class="line">    phone:<span class="string">''</span>,</span><br><span class="line">    loc:<span class="string">''</span>,</span><br><span class="line">    role: <span class="string">''</span>,</span><br><span class="line">    avatar: <span class="string">''</span>,</span><br><span class="line">    brandId:<span class="string">''</span>,</span><br><span class="line">    status: <span class="literal">false</span>,</span><br><span class="line">    secretStatus:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_USER:<span class="function">(<span class="params">state,info</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(info.role===<span class="string">'normal'</span>)&#123;</span><br><span class="line">        state.id=info.data.id</span><br><span class="line">        state.name = info.data.name===<span class="literal">null</span>?<span class="string">"User"</span>:info.data.name</span><br><span class="line">        state.sex = info.data.sex</span><br><span class="line">        state.loc = info.data.loc</span><br><span class="line">        state.avatar = info.data.avatar===<span class="literal">null</span>?defaultAvatar:baseUrl+info.data.avatar</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(info.role===<span class="string">'admin'</span> || info.role===<span class="string">'superAdmin'</span>)&#123;</span><br><span class="line">        state.id = info.data.shopId</span><br><span class="line">        state.name = info.data.shopName===<span class="literal">null</span>?<span class="string">"admin"</span>:info.data.shopName</span><br><span class="line">        state.brandId=info.data.brand.brandId</span><br><span class="line">        state.avatar = info.data.brand.logo===<span class="literal">null</span>?defaultAvatar:baseUrl+info.data.brand.logo</span><br><span class="line">      &#125;</span><br><span class="line">      state.token = info.data.token</span><br><span class="line">      state.phone = info.data.phone</span><br><span class="line">      state.role = info.role</span><br><span class="line">      state.status = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    CLEAR_USER:<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">      state.id=<span class="string">''</span></span><br><span class="line">      state.token = <span class="string">''</span></span><br><span class="line">      state.name = <span class="string">''</span></span><br><span class="line">      state.sex = <span class="string">''</span></span><br><span class="line">      state.phone = <span class="string">''</span></span><br><span class="line">      state.loc = <span class="string">''</span></span><br><span class="line">      state.role = <span class="string">''</span></span><br><span class="line">      state.avatar = <span class="string">''</span></span><br><span class="line">      state.status = <span class="literal">false</span></span><br><span class="line">      state.brandId = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">//用户信息状态初始化</span></span><br><span class="line">    UserInfoInit(&#123;commit&#125;)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'CLEAR_USER'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用户名登录</span></span><br><span class="line">    loginById(&#123; commit &#125;, loginInfo) &#123;</span><br><span class="line">      <span class="keyword">const</span> id = loginInfo.id.trim()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        loginById(id, loginInfo.encryptPassword,loginInfo.role).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(data.code===<span class="number">401</span>)</span><br><span class="line">            reject(<span class="string">"用户名或密码错误"</span>)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(data.code===<span class="number">402</span>)</span><br><span class="line">            reject(<span class="string">"用户名不存在"</span>)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(data.code===<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.role===<span class="string">'admin'</span>||data.role===<span class="string">'superAdmin'</span>)</span><br><span class="line">              commit(<span class="string">'SET_SECRET_STATUS'</span>,<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              checkHaveSecret(id).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                commit(<span class="string">'SET_SECRET_STATUS'</span>,response===<span class="string">'success'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            commit(<span class="string">'SET_USER'</span>,data)</span><br><span class="line">            setToken(<span class="string">'token'</span>,data.data.token)</span><br><span class="line">            <span class="keyword">if</span>(loginInfo.radio===<span class="string">'1'</span>)&#123;</span><br><span class="line">              setToken(<span class="string">'id'</span>,id)</span><br><span class="line">              setToken(<span class="string">'password'</span>,loginInfo.password)</span><br><span class="line">              setToken(<span class="string">'role'</span>,loginInfo.role)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              removeToken(<span class="string">'id'</span>)</span><br><span class="line">              removeToken(<span class="string">'password'</span>)</span><br><span class="line">              removeToken(<span class="string">'role'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user</span><br></pre></td></tr></table></figure><p>说明：<br>（1）在写src/store/index.js 里的内容之前，要在你的项目里安装Vuex ，这里只提供npm的安装方法，在项目根目录处打开cmd 输入下面的命令，后回车</p><p><code>npm install vuex --save</code></p><p>（2） 在这个<code>store/store/index.js</code>中 这段代码<code>setToken</code>，<code>removeToken</code>这两个函数源码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"><span class="keyword">import</span> &#123;encryptMd5&#125; <span class="keyword">from</span> <span class="string">'@/utils/encrypt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*const TokenKey = 'Admin-Token'*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">TokenKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.get(TokenKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">TokenKey,token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(TokenKey===<span class="string">'token'</span>)</span><br><span class="line">    <span class="keyword">return</span> Cookies.set(TokenKey, token,&#123; <span class="attr">expires</span>:<span class="number">1</span> &#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Cookies.set(TokenKey, token,&#123;<span class="attr">expires</span>:<span class="number">3</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeToken</span>(<span class="params">TonkenKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.remove(TonkenKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义全局拦截器和Ajax请求对象</strong></p><p><code>src/main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message,MessageBox &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseUrl &#125; <span class="keyword">from</span> <span class="string">'@/api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tokenBlankList=[<span class="string">'/user/register'</span>,<span class="string">'/car/get'</span>]</span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: baseUrl, <span class="comment">// api 的 base_url=”http://localhost:8080“</span></span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 发送请求时添加配置信息</span></span><br><span class="line">    <span class="keyword">if</span>(config.headers[<span class="string">'Content-Type'</span>]===<span class="string">'application/json'</span>)</span><br><span class="line">      config.data = <span class="built_in">JSON</span>.stringify(config.data);</span><br><span class="line">    <span class="keyword">if</span> (tokenBlankList.indexOf(config.url)===<span class="number">-1</span>&amp;&amp;getToken(<span class="string">'token'</span>)&amp;&amp;<span class="keyword">typeof</span>(getToken(<span class="string">'token'</span>))!==<span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="comment">// 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改</span></span><br><span class="line">      config.headers[<span class="string">'Token'</span>] = getToken(<span class="string">'token'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 下面的注释为通过在response里，自定义code来标示请求状态</span></span><br><span class="line"><span class="comment">   * 当code返回如下情况则说明权限有问题，登出并返回到登录页</span></span><br><span class="line"><span class="comment">   * 如想通过 xmlhttprequest 来状态码标识 逻辑可写在下面error中</span></span><br><span class="line"><span class="comment">   * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="comment">//404:非法的token; 403:其他客户端登录了;  50014:Token 过期了;</span></span><br><span class="line">    <span class="keyword">if</span> (res.code === <span class="number">404</span> || res.code === <span class="number">403</span> || res.code === <span class="number">402</span>) &#123;</span><br><span class="line">       <span class="comment">//请自行在引入 MessageBox</span></span><br><span class="line">       <span class="comment">//import &#123; Message, MessageBox &#125; from 'element-ui'</span></span><br><span class="line">      MessageBox.confirm(<span class="string">'你已被登出，可以取消继续留在该页面，或者重新登录'</span>, <span class="string">'确定登出'</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">'重新登录'</span>,</span><br><span class="line">        cancelButtonText: <span class="string">'取消'</span>,</span><br><span class="line">        type: <span class="string">'warning'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          location.reload()  <span class="comment">//为了重新实例化vue-router对象 避免bug</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'error'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(res.code===<span class="number">400</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.datas</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">'error'</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>说明</p><p>这个是全部的代码，不一定都和这个一样，下面说说用token验证，<code>src/main.js</code>中要配置那些东西<br>说明</p><p><strong>具体前端代码</strong></p><p><code>src/components/login.vue</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onLogin()&#123;</span><br><span class="line"><span class="comment">//数据格式验证完毕，实现登录功能</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.$refs.Verity.isPassing)&#123;</span><br><span class="line"><span class="keyword">this</span>.$message.error(&#123;</span><br><span class="line">message:<span class="string">"验证失败,请拉拽到右边以验证"</span>,</span><br><span class="line">showClose:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.loginForm.encryptPassword=encryptMd5(<span class="keyword">this</span>.loginForm.password)</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'loginById'</span>, <span class="keyword">this</span>.loginForm).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.$message.error(&#123;</span><br><span class="line">message:err,<span class="comment">/*"登录失败,请检查后重试"*/</span></span><br><span class="line">showClose:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.props.show=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体源代码详见Github"><a href="#具体源代码详见Github" class="headerlink" title="具体源代码详见Github"></a>具体源代码详见Github</h2><p><a href="https://github.com/lamprose/CarShop" target="_blank" rel="noopener">Github-CarShop</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做数据库课程设计，我是做前端的，后端并不是很懂，看vue这个框架仅仅只是入门，所以这篇文章写的可能不怎么好，仅作记录，有什么不对或不足的地方欢迎大神指出。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="前端" scheme="https://lamprose.github.io/tags/fore-end/"/>
    
      <category term="vue" scheme="https://lamprose.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://lamprose.github.io/development/git/"/>
    <id>https://lamprose.github.io/development/git/</id>
    <published>2019-01-31T11:47:41.000Z</published>
    <updated>2019-05-11T12:22:20.843Z</updated>
    
    <content type="html"><![CDATA[<p>实际项目开发中，我们经常会用一些版本控制器来托管自己的代码，今天就来总结下Git的相关用法<a id="more"></a></p><h1 id="Git工具下载安装"><a href="#Git工具下载安装" class="headerlink" title="Git工具下载安装"></a>Git工具下载安装</h1><ol><li><p>下载Git  官方地址为：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-1.png" alt="git-1"></p></li><li><p>下载完之后，双击安装</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-2.png" alt="git-2"></p></li><li><p>选择安装目录</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-3.png" alt="git-3"></p></li><li><p>选择组件</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-4.png" alt="git-4"></p><p>说明:</p><blockquote><p>(1) 图标组件(Addition icons) : 选择是否创建桌面快捷方式。</p><p>(2) 桌面浏览(Windows Explorer integration) : 浏览源码的方法，使用bash 或者 使用Git GUI工具。</p><p>(3)Git LFS 是 Github 开发的一个 Git 的扩展，用于实现 Git 对大文件的支持</p><p>(4) 关联配置文件 : 是否关联 git 配置文件, 该配置文件主要显示文本编辑器的样式。</p><p>(5) 关联shell脚本文件 : 是否关联Bash命令行执行的脚本文件。</p><p>(6) 使用TrueType编码 : 在命令行中是否使用TruthType编码, 该编码是微软和苹果公司制定的通用编码。</p><p>(7) 每天检查Git是否有Windows更新 </p></blockquote></li><li><p>开始菜单目录名设置</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-5.png" alt="git-5"></p></li><li><p>选择默认编辑器</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-6.png" alt="git-6"></p></li><li><p>选择使用命令行环境</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-7.png" alt="git-7"></p></li><li><p>以下四步为默认。直接点击下一步</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-8.png" alt="git-8"></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-9.png" alt="git-9"></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-10.png" alt="git-10"></p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-11.png" alt="git-11"></p></li><li><p>安装完成</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-12.png" alt="git-12"></p></li><li><p>查看右键菜单是否有Git GUI和Git Bash以此检验是否安装成功</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-13.png" alt="git-13"></p></li></ol><h1 id="Git命令使用详解"><a href="#Git命令使用详解" class="headerlink" title="Git命令使用详解"></a>Git命令使用详解</h1><h2 id="Git基本信息配置"><a href="#Git基本信息配置" class="headerlink" title="Git基本信息配置"></a>Git基本信息配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &apos;你在github上注册的用户名&apos;;//设置用户名</span><br><span class="line">git config --global user.email &apos;注册时候的邮箱&apos;;        //设置用户邮箱</span><br><span class="line">git config --list          //配置ok之后，我们用如下命令来看看是否配置成功</span><br></pre></td></tr></table></figure><h2 id="SSH密钥创建"><a href="#SSH密钥创建" class="headerlink" title="SSH密钥创建"></a>SSH密钥创建</h2><ol><li><p>启动Git Bash</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-14.png" alt="git-14"></p></li><li><p>键入命令<code>ssh-keygen -t rsa -C &quot;email@email.com&quot;</code>,”<a href="mailto:email@email.com" target="_blank" rel="noopener">email@email.com</a>“是你的github账号</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-15.png" alt="git-15"></p></li><li><p>此时，你的<code>C:\Users\admin\.ssh</code>这个路径下会生成两个文件：id_rsa和id_rsa.pub</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-16.png" alt="git-16"></p></li><li><p>用记事本打开id_rsa.pub文件，复制内容，在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚才复制的内容。</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-17.png" alt="git-17"></p></li><li><p>测试是否成功添加，在GIt Bash键入命令<code>ssh -T git@github.com</code>,出现以下画面则添加成功</p><p><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-18.png" alt="git-18"></p></li></ol><h2 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h2><ol><li>创建文件夹<ul><li>方法一:可以鼠标右键&gt;点击新建文件夹<floder name></floder></li><li>方法二:使用命令<code>mkdir &lt;floder name&gt;</code></li></ul></li><li>在文件夹内初始化Git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;floder name&gt; //进入刚创建的文件夹目录</span><br><span class="line">git init        //使用git初始化该文件夹</span><br></pre></td></tr></table></figure></li></ol><h2 id="向Git仓库里添加文件"><a href="#向Git仓库里添加文件" class="headerlink" title="向Git仓库里添加文件"></a>向Git仓库里添加文件</h2><ul><li>方法一:直接在该文件夹内右键鼠标创建文件或文件夹</li><li>方法二:使用命令<code>touch &lt;file name&gt;</code>创建文件</li></ul><h2 id="Git克隆远程仓库"><a href="#Git克隆远程仓库" class="headerlink" title="Git克隆远程仓库"></a>Git克隆远程仓库</h2><h3 id="克隆默认分支"><a href="#克隆默认分支" class="headerlink" title="克隆默认分支"></a>克隆默认分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h3 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;仓库指定分支&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h2 id="git本地仓库同步到远程仓库"><a href="#git本地仓库同步到远程仓库" class="headerlink" title="git本地仓库同步到远程仓库"></a><span id="sync">git本地仓库同步到远程仓库</span></h2><ol><li><p>查看仓库状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt; //若是添加所有文件直接输入git add .</span><br></pre></td></tr></table></figure></li><li><p>提交到本地仓库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m `&lt;提交信息&gt;`</span><br></pre></td></tr></table></figure></li><li><p>由本地仓库push到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  //上传到指定分支git push origin &lt;指定分支&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong><em>错误解决方法:</em></strong>  </p><ol><li><p>出现提交错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m `&lt;提交信息&gt;`</span><br><span class="line">fatal: could not open `.git/COMMIT_EDITMSG`: Permisssion  denide</span><br></pre></td></tr></table></figure><p>解决:这是通过Git GUI进行提交时发生的错误，由 .git 文件夹中的文件被设为“只读”所致，将 .git 文件夹下的所有文件、文件夹及其子文件的只读属性去掉即可.</p></li><li><p>如果出现无法同步或没有权限</p><p>解决:用户名和密码一定要和github上的一致.<br><img src="https://github.com/lamprose/image_hosting/raw/blog/git/git-19.png" alt="git-19"></p></li></ol><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line">* hexo    //显示我们正处于hexo分支下</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master//显示默认分支</span><br><span class="line">  remotes/origin/hexo</span><br><span class="line">  remotes/origin/master//其他两个分支</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;创建分支&gt;</span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换,相当于以下两条命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;创建分支&gt;</span><br><span class="line">git checkout &lt;创建分支&gt;</span><br></pre></td></tr></table></figure></p><p>然后可以使用<code>git branch -a</code>查看当前分支,验证是否创建成功.<br>最后再<a href="#sync">同步到远程仓库</a>即可</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;指定分支&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际项目开发中，我们经常会用一些版本控制器来托管自己的代码，今天就来总结下Git的相关用法
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="github" scheme="https://lamprose.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Python中pip的使用</title>
    <link href="https://lamprose.github.io/development/pip/"/>
    <id>https://lamprose.github.io/development/pip/</id>
    <published>2019-01-30T07:38:01.000Z</published>
    <updated>2019-06-09T07:21:34.375Z</updated>
    
    <content type="html"><![CDATA[<p>在python的学习过程中，肯定会遇到很多安装模块的地方，可以使用<a href="http://blog.csdn.net/winterto1990/article/details/47453211" target="_blank" rel="noopener">easy_install</a>安装，但是easy_install相对于pip而言，最大的缺陷就是它所安装的模块是不能够卸载的，其他功能是和pip一样的。<br><a id="more"></a></p><h1 id="下载安装pip"><a href="#下载安装pip" class="headerlink" title="下载安装pip"></a>下载安装pip</h1><h2 id="下载pip"><a href="#下载pip" class="headerlink" title="下载pip"></a>下载pip</h2><p>下载pip安装py脚本 <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">右键另存为</a><br>或者直接运行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure></p><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><h1 id="pip使用详解"><a href="#pip使用详解" class="headerlink" title="pip使用详解"></a>pip使用详解</h1><h2 id="pip安装模块包"><a href="#pip安装模块包" class="headerlink" title="pip安装模块包"></a>pip安装模块包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install &lt;package name&gt;  //使用命令安装</span><br><span class="line">[...]</span><br><span class="line">successfully installed &lt;package-name&gt;</span><br></pre></td></tr></table></figure><h2 id="pip查看已安装的包列表"><a href="#pip查看已安装的包列表" class="headerlink" title="pip查看已安装的包列表"></a>pip查看已安装的包列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip list //显示已安装包列表</span><br><span class="line">Package Version</span><br><span class="line">------- -------</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h2 id="pip检查那些包需要更新"><a href="#pip检查那些包需要更新" class="headerlink" title="pip检查那些包需要更新"></a>pip检查那些包需要更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip list --outdated //显示需要更新的包</span><br><span class="line">Package Version Latest  Type</span><br><span class="line">------- ------- ------  -----</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h2 id="pip更新包"><a href="#pip更新包" class="headerlink" title="pip更新包"></a>pip更新包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade &lt;package name&gt;</span><br><span class="line">[...]</span><br><span class="line">Installing collected packages: &lt;package name&gt;</span><br><span class="line">  Found existing installation: &lt;old version package name&gt;</span><br><span class="line">    Uninstalling &lt;old version package name&gt;</span><br><span class="line">      Successfully uninstalled &lt;new version package name&gt;</span><br><span class="line">Successfully installed &lt;new version package name&gt;</span><br></pre></td></tr></table></figure><h2 id="pip卸载包"><a href="#pip卸载包" class="headerlink" title="pip卸载包"></a>pip卸载包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall &lt;package name&gt;</span><br><span class="line">Uninstalling &lt;package name&gt;:</span><br><span class="line">  Would remove:</span><br><span class="line">    [,,,]</span><br><span class="line">Proceed (y/n)?</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在python的学习过程中，肯定会遇到很多安装模块的地方，可以使用&lt;a href=&quot;http://blog.csdn.net/winterto1990/article/details/47453211&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;easy_install&lt;/a&gt;安装，但是easy_install相对于pip而言，最大的缺陷就是它所安装的模块是不能够卸载的，其他功能是和pip一样的。&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="python" scheme="https://lamprose.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="https://lamprose.github.io/share/hexo-establish/"/>
    <id>https://lamprose.github.io/share/hexo-establish/</id>
    <published>2019-01-25T07:40:17.000Z</published>
    <updated>2019-05-11T12:32:18.848Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/lamprose/image_hosting/raw/blog/hexo/hexo_head.png" alt="hexo_head.png"></p><h1 id="Github-Hexo搭建博客"><a href="#Github-Hexo搭建博客" class="headerlink" title="Github+Hexo搭建博客"></a>Github+Hexo搭建博客</h1><a id="more"></a><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ol><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>下载并安装</li><li><a href="https://lamprose.github.io/development/git">Git</a>下载并安装</li><li>安装Hexo，在命令行（即Git Bash）内输入命令：<br><code>$ npm install -g hexo-cli</code></li><li><p>初始化Hexo，并安装其依赖包<br>在命令行（即Git Bash）中输入命令： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;floder&gt;</span><br><span class="line">$ cd &lt;floder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p> 新建完成后，在路径下（即<floder>），会产生以下文件和文件夹</floder></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p> <strong><em>注：</em></strong></p><ul><li>hexo相关命令均在站点目录下，用Git Bash运行。</li><li>站点配置文件：站点目录下的<code>_config.yml。   ​ 路径为</code><folder>_config.yml`</folder></li><li>主题配置文件：站点目录下的themes文件夹下的，主题文件夹下的<code>_config.yml</code>。<br>​ 路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></li></ul></li><li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：<br><code>hexo server //也可简写为 hexo s</code></p></li><li>浏览器访问：<code>http://localhost:4000/</code></li></ol><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>Hexo默认主题为landscape，推荐以下主题：</p><ol><li><a href>snippet</a></li><li><a href>next</a></li><li><a href>BlueLake</a></li><li><a href>Jsimple</a></li></ol><p>更多主题详见(<a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a>)</p><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><ol><li>下载主题</li><li>将下载好的主题文件夹复制到站点目录下的<code>themes</code>文件夹下。</li><li>更改站点配置文件<code>_config.yml</code>的theme字段，更改为主题文件夹名称： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h4><p>在 <code>themes/&lt;thenme floder&gt;/source/css/_custom/custom.styl</code> 中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background:url(/images/bg.jpg); //背景图片所在目录</span><br><span class="line">    background-size:cover;</span><br><span class="line">    background-repeat:no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h4><p>在 <code>themes/&lt;theme floder&gt;/source/css/_custom/custom.styl</code> 中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">        font-family: Zitiming;</span><br><span class="line">        src: url(&apos;/fonts/Zitiming.ttf&apos;);</span><br><span class="line">    &#125;//导入自定义字体</span><br><span class="line">    .site-title &#123;</span><br><span class="line">        font-size: 40px !important;</span><br><span class="line">    font-family: &apos;Zitiming&apos; !important;</span><br><span class="line">    &#125;//应用字体到Logo</span><br></pre></td></tr></table></figure></p><h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><p>打开<code>themes/&lt;theme floder&gt;/source/css/_custom/custom.styl</code>,在里面写下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;/images/cursor.ico&quot;),auto!important //将鼠标样式icon图片放置于themes\next\source\images目录下</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;/images/cursor_active.ico&quot;),auto!important //将鼠标激活样式icon图片放置于themes\next\source\images目录下</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>注：</em></strong></p><ul><li>鼠标样式图片格式必须为icon</li></ul><h4 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h4><p>默认情况下访问URL路径为：<code>domain/2019/01/23/hexo-establish</code>,修改为<code>domain/share/hexo-establish</code>。 编辑 Hexo 站点下的<code>_config.yml</code>文件，修改其中的<code>permalink</code>字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :category/:title/</span><br></pre></td></tr></table></figure></p><h4 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h4><ol><li><p>安装插件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p> 然后在需要置顶的文章的Front-matter中加上top即可：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 2019</span><br><span class="line">date: 2019-01-23 16:10:03</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>设置置顶标志<br>打开：<code>/themes/&lt;theme floder&gt;/layout/_macro/post.swig</code>，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下,插入以下代码即可：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a><a href="#在右上角或者左上角实现fork-me-on-github" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h4><ol><li>选择样式<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>,</li><li>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接： </li><li>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</li></ol><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">推荐指数</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left"><a href>Valine</a></td><td style="text-align:center">4</td><td style="text-align:left">每天30000条评论，10GB的储存</td><td style="text-align:left">作者评论无标识</td></tr><tr><td style="text-align:left"><a href>livere</a></td><td style="text-align:center">4</td><td style="text-align:left">多种账号登陆</td><td style="text-align:left">评论无法导出</td></tr><tr><td style="text-align:left"><a href>畅言</a></td><td style="text-align:center">3</td><td style="text-align:left">美观</td><td style="text-align:left">必须备份域名</td></tr><tr><td style="text-align:left"><a href>Disqus</a></td><td style="text-align:center">1</td><td style="text-align:left"></td><td style="text-align:left">需要翻*墙</td></tr></tbody></table><h4 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h4><p>1.1 获取APP ID和APP Key<br>请先登陆或注册LearnCloud，进入控制台后点击创建应用，<br>进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了。</p><p>1.2 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Valine</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># More info available at https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true </span><br><span class="line">  appid:  hD6toShsJcsEQR6gT2iaw58b-gzGzoHsz </span><br><span class="line">  appkey:  Xn8ohIhFuwNcsDqVdPD6baA2 </span><br><span class="line">  notify: true </span><br><span class="line">  verify: false </span><br><span class="line">  placeholder: ヾﾉ≧∀≦)o来啊，快活啊! //评论框内的水印文字</span><br><span class="line">  avatar: mm </span><br><span class="line">  guest_info: nick,mail,link //评论所需信息</span><br><span class="line">  pageSize: 10 </span><br><span class="line">  visitor: false </span><br><span class="line">  comment_count: true</span><br></pre></td></tr></table></figure></p><p>1.3 运行hexo g&amp;&amp;hexo d推送到博客。</p><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。</p><h4 id="YAML-Parsing-Error"><a href="#YAML-Parsing-Error" class="headerlink" title="YAML Parsing Error"></a>YAML Parsing Error</h4><ol><li>参数中包含冒号，请用加引号，如<code>Last updated: %s</code></li><li>字段后面的冒号必须为英文冒号，如：<code>last_updated:</code></li><li>字段冒号后面必须跟一个空格，如：<code>last_updated: “Last updated: %s”</code></li></ol><h4 id="Server-Problems"><a href="#Server-Problems" class="headerlink" title="Server Problems"></a>Server Problems</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure><p>你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure></p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p>参数说明</p><ul><li>[layout]可以分为以下三种</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:left">功能</th><th style="text-align:left">文章路径</th></tr></thead><tbody><tr><td style="text-align:center">post</td><td style="text-align:left">新建博文</td><td style="text-align:left">source/post</td></tr><tr><td style="text-align:center">page</td><td style="text-align:left">新建页面(如404，标签等)</td><td style="text-align:left">source</td></tr><tr><td style="text-align:center">draft</td><td style="text-align:left">草稿</td><td style="text-align:left">source/draft</td></tr></tbody></table><p>草稿可以通过以下命令发布<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><ul><li>title不是博文标题，而是博文md文件名字。</li></ul><h4 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h4><ul><li><p>创建模板<br>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new blog “simon”</span><br></pre></td></tr></table></figure><p>  在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p></li><li>修改参数<br>以下是您可以在模版中使用的变量：</li></ul><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">layout</td><td style="text-align:center">布局</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">标题</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">文章建立日期</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/lamprose/image_hosting/raw/blog/hexo/hexo_head.png&quot; alt=&quot;hexo_head.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Github-Hexo搭建博客&quot;&gt;&lt;a href=&quot;#Github-Hexo搭建博客&quot; class=&quot;headerlink&quot; title=&quot;Github+Hexo搭建博客&quot;&gt;&lt;/a&gt;Github+Hexo搭建博客&lt;/h1&gt;
    
    </summary>
    
      <category term="分享" scheme="https://lamprose.github.io/categories/share/"/>
    
    
      <category term="前端" scheme="https://lamprose.github.io/tags/fore-end/"/>
    
      <category term="hexo" scheme="https://lamprose.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Magisk</title>
    <link href="https://lamprose.github.io/development/Magisk/"/>
    <id>https://lamprose.github.io/development/Magisk/</id>
    <published>2019-01-24T02:28:50.000Z</published>
    <updated>2019-05-09T18:12:36.539Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/lamprose/image_hosting/raw/blog/magisk/magisk_head.png" alt="magisk_head.png"></p><h1 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Magisk，以不触动/system的方式修改/system，继Super SU systemless化后的新发展。</p><p>作者<a href="https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445" target="_blank" rel="noopener">topjohnwu</a> ,<i class="fa fa-github"><a href="https://github.com/topjohnwu/Magisk" target="_blank" rel="noopener">Github</a></i></p><h2 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h2><h3 id="Magic-Mount"><a href="#Magic-Mount" class="headerlink" title="Magic Mount:"></a>Magic Mount:</h3><p>此特性不仅允许用户替换/system目录下已经存在的文件及文件夹，同时也支持创建/system原本不存在的文件及文件夹。当然，实际上并不修改原来的/system.<br>这意味之前的修改模块(zip刷机包)基本都可以在这种systemless-ly模式下工作。</p><h3 id="Multiple-Entry-Points"><a href="#Multiple-Entry-Points" class="headerlink" title="Multiple Entry Points:"></a>Multiple Entry Points:</h3><p>如果“Magic Mount”还不能完成实现你的需求，Magisk在系统启动过程中提供了几个暂停点来运行你的脚本，使开发者可以在任何需要的时候实现所需的功能。在启动过程被暂停后，直到你的脚本被执行前，Magisk都可以可靠地阻断启动过程的继续。</p><h3 id="Magisk-Manager"><a href="#Magisk-Manager" class="headerlink" title="Magisk Manager:"></a>Magisk Manager:</h3><p>Magisk Manager这款app可以帮助你管理root状态，以及管理所有的Magisk模块(模块管理功能还在开发中)，就像Xposed模块一样。</p><h3 id="Special-“Cache”-Mode"><a href="#Special-“Cache”-Mode" class="headerlink" title="Special “Cache” Mode:"></a>Special “Cache” Mode:</h3><p>这种模式支持在system props被加载前运行，这意味Magisk能更多的可能性。<br>systemless hosts 默认开启，各种修改hosts的广告屏蔽软件无需修改就可以直接使用此systemless模式。<br>Magisk还将会移除 system verify和 forceencrypt(二者均可以通过.magisk文件手动配置), 并且修改sepolicy使得脚本运行正常。<br>这意味着开发者以后无需担心boot.img的修改问题。<br>一些主要的系统修改，如root和Xposed等，都可以依赖于Magisk.<br>magisk.img(所有systemless模块存储在此文件内)支持自动调节文件大小以适应较大体积模块，同时也可以在某些模块移除后自动缩小大小。</p><p><code>tips</code></p><blockquote><ol><li>建议配合phh’s SuperUser(原帖内附带的修改版)来使用，这样systemless特性最低支持到Android 5.0，同时还可以在开机后一键关闭root；Chainfire的SuperSU(使用原帖修改版)systemless最低支持5.1，暂不支持开机后一键关闭root。一键关闭root主要为了Android pay的使用，不使用Android pay的话这两种root方式没太大区别。</li><li>systemless Xposed需要对应版本呢，安装器对应material版。<br><a href="http://coolapk.com/r/2ord" target="_blank" rel="noopener">http://coolapk.com/r/2ord</a> </li><li>systemless ViPER4Android，原帖仅提供驱动systemless安装，刷入后在安装apk即可。</li></ol></blockquote><h3 id="模块分享"><a href="#模块分享" class="headerlink" title="模块分享"></a>模块分享</h3><p>​    </p>]]></content>
    
    <summary type="html">
    
      Magisk，以不触动/system的方式修改/system，继Super SU systemless化后的新发展。
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="Magisk" scheme="https://lamprose.github.io/tags/Magisk/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lamprose.github.io/development/hello-world/"/>
    <id>https://lamprose.github.io/development/hello-world/</id>
    <published>2019-01-23T07:06:00.000Z</published>
    <updated>2019-05-09T18:11:34.763Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>！这是你的第一篇文章。查看<a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a>以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障排除</a>中找到答案，或者您可以在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>上询问我。<br><a id="more"></a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;！这是你的第一篇文章。查看&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在&lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;故障排除&lt;/a&gt;中找到答案，或者您可以在&lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;上询问我。&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="https://lamprose.github.io/categories/development/"/>
    
    
      <category term="前端" scheme="https://lamprose.github.io/tags/fore-end/"/>
    
      <category term="hexo" scheme="https://lamprose.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
